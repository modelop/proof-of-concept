#      _____         _     ____
#     |  ___|_ _ ___| |_  / ___|  ___ ___  _ __ ___
#     | |_ / _` / __| __| \___ \ / __/ _ \| '__/ _ \
#     |  _| (_| \__ \ |_   ___) | (_| (_) | | |  __/
#     |_|  \__,_|___/\__| |____/ \___\___/|_|  \___|
#
#  **NOTE**: In order to run commands in this Makefile, the following possibly non-standard utilities must be installed on the system 
#  	* `kubectl` - kubernetes command-line interface (`https://kubernetes.io/docs/tasks/tools/install-kubectl/`)
#  	* `htpasswd` - Apache secure password file generator (typically found in `apache2-utils` package)
#
#  **NOTE**: If fastscore CLI passwords must be created, make sure you fill in a comma-separated list of usernames in the parameters file generated by `make parameters`
#  	* Then, run `make cli-passwords`
#  	** This will prompt you to enter a password for each user to stdin, and create the .htpasswd file containing usernames and hashed and salted passwords


######################
#  Stack Deployment  #
######################

# Set default parameters
parameters_file=./env-parameters.txt
#Set $beta=true to deploy with beta features
beta=false
# Set $persistent=true to enable use of persistentVolumeClaims to keep DB data between runs
persistent=false

# Check to see if beta features or persistent operation is turned on
ifeq ($(persistent),true)
parameters: parameters-persistent
deployment_type=persistent
else
parameters: parameters-stateless
deployment_type=stateless
endif

#If you want to include beta features, change $make_beta_features to true
ifeq ($(beta),true)
stack: stack-beta
else
stack: stack-release
endif

.PHONY: clean configmap cleanupconfigmap cleanupsecrets cli-passwords dags deploy environment parameters stack

clean: cleanupconfigmap 
	kubectl delete all -l stack=fastscore
	rm -rf ./implementation/

configmap: cleanupconfigmap
	kubectl create configmap airflow-dags-configmap --from-file=./implementation/config/airflow_config/dags || echo "done"
	kubectl create configmap airflow-processing-configmap --from-file=./implementation/config/airflow_config/processing || echo "done"
	kubectl create configmap fastscore-configmap --from-file=./implementation/config/fastscore_config.yaml || echo "done"
	kubectl create configmap cli-passwd --from-file=./implementation/config/cli_passwd || echo "done"

cleanupconfigmap:
	kubectl delete configmap airflow-dags-configmap || echo "done"
	kubectl delete configmap airflow-processing-configmap || echo "done"
	kubectl delete configmap fastscore-configmap || echo "done"

cleanupsecrets:
	kubectl delete secrets --all

cli-passwords:
	kubectl delete configmap cli-passwd || echo "done"
	@touch ./implementation/config/cli_passwd && for name in $$(cat ./implementation/config/cli_usernames | sed 's/,/\n/g'); do echo "Enter password for user $$name"; htpasswd ./implementation/config/cli_passwd $$name ; done
	kubectl create configmap cli-passwd --from-file=./implementation/config/cli_passwd || echo "done"

dags: configmap
	kubectl delete pod $$(kubectl get pods -l app=scheduler | awk '/scheduler/ {print $$1}')

deploy: environment configmap stack

environment:
	@mkdir -p ./implementation/
	@bash -c "./scripts/replace_parameters.sh translate ${parameters_file} ./templates/ ./implementation/"

parameters-persistent:
	@bash -c "./scripts/replace_parameters.sh discover ./templates/  > env-parameters.txt"

parameters-stateless: parameters-persistent
	@sed -i '/.*STORAGECLASS.*/d' ./env-parameters.txt

stack-beta: stack-release
	kubectl apply -f ./implementation/manifests/beta/${deployment_type}

stack-release:
	kubectl apply -f ./implementation/manifests/release/common/
	kubectl apply -f ./implementation/manifests/release/${deployment_type}
